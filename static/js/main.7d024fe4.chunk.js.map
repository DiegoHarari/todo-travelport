{"version":3,"sources":["Components/TodoForm.js","Components/Todo.js","Components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","edit","onSubmit","useState","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","id","Math","floor","random","text","data-testid","className","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","newTodos","updatedTodos","removedArr","filter","todoId","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d024fe4.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction TodoForm({ edit, onSubmit }) {\n    const [input, setInput] = useState(edit ? edit.value : '');\n\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        inputRef.current.focus();\n    });\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        onSubmit({\n            id: Math.floor(Math.random() * 10000),\n            text: input\n        });\n        setInput('');\n    };\n\n    return (\n        <div data-testid=\"todo-form\">\n            <form onSubmit={handleSubmit} className='todo-form'>\n                {edit ? (\n                    <>\n                        <input\n                            placeholder='Update your item'\n                            value={input}\n                            onChange={handleChange}\n                            name='text'\n                            ref={inputRef}\n                            className='todo-input edit'\n                        />\n                        <button onClick={handleSubmit} className='todo-button edit'>\n                            Update\n          </button>\n                    </>\n                ) : (\n                    <>\n                        <input\n                            data-testid=\"todo-input\"\n                            placeholder='Add a todo'\n                            value={input}\n                            onChange={handleChange}\n                            name='text'\n                            className='todo-input'\n                            ref={inputRef}\n                        />\n                        <button onClick={handleSubmit} className='todo-button' data-testid=\"add-button\">\n                            Add todo\n          </button>\n                    </>\n                )}\n            </form>\n        </div>\n    );\n}\n\nexport default TodoForm;","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\n\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    });\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value);\n        setEdit({\n            id: null,\n            value: ''\n        });\n    };\n\n    if (edit.id) {\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n    }\n\n    return todos.map((todo, index) => (\n        <div\n            className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\n            key={index}\n        >\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n                {todo.text}\n            </div>\n            <div className='icons'>\n                <RiCloseCircleLine\n                    onClick={() => removeTodo(todo.id)}\n                    className='delete-icon'\n                />\n                <TiEdit\n                    onClick={() => setEdit({ id: todo.id, value: todo.text })}\n                    className='edit-icon'\n                />\n            </div>\n        </div>\n    ));\n};\n\nexport default Todo;","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nfunction TodoList() {\n    const [todos, setTodos] = useState([]);\n\n    const addTodo = todo => {\n        if (!todo.text) {\n            return;\n        }\n        const newTodos = [todo, ...todos];\n        setTodos(newTodos);\n    };\n\n    const updateTodo = (todoId, newValue) => {\n        if (!newValue.text) {\n            return;\n        }\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n    };\n\n    const removeTodo = id => {\n        const removedArr = [...todos].filter(todo => todo.id !== id);\n        setTodos(removedArr);\n    };\n\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.isComplete = !todo.isComplete;\n            }\n            return todo;\n        });\n        setTodos(updatedTodos);\n    };\n\n    return (\n        <div data-testid=\"todo-list\">\n            <h1>What is your main focus today?</h1>\n            <TodoForm onSubmit={addTodo} />\n            <Todo\n                todos={todos}\n                completeTodo={completeTodo}\n                removeTodo={removeTodo}\n                updateTodo={updateTodo}\n            />\n        </div>\n    );\n}\n\nexport default TodoList;","import TodoList from './Components/TodoList'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}